class GridToFullscreenEffect{constructor(e,t){this.container=e,this.items=t,this.camera=null,this.scene=null,this.renderer=null,this.createTextures(),this.uniforms={uProgress:new THREE.Uniform(0),uMeshScale:new THREE.Uniform(new THREE.Vector2(1,1)),uMeshPosition:new THREE.Uniform(new THREE.Vector2(0,0)),uViewSize:new THREE.Uniform(new THREE.Vector2(1,1)),uTexture:new THREE.Uniform(null),uImageRes:new THREE.Uniform(new THREE.Vector2(0,0))},this.animating=!1,this.state="grid"}toGrid(){"grid"===this.state||this.isAnimating||(this.animating=!0,this.tween=TweenLite.to(this.uniforms.uProgress,.75,{value:0,ease:Power3.easeOut,onUpdate:this.render.bind(this),onComplete:()=>{this.isAnimating=!1,this.state="grid",this.container.style.zIndex=-1}}))}toFullscreen(){"fullscreen"===this.state||this.isAnimating||(this.animating=!0,this.tween=TweenLite.to(this.uniforms.uProgress,2,{value:1,ease:Quint.easeOut,onUpdate:this.render.bind(this),onComplete:()=>{this.isAnimating=!1,this.state="fullscreen",this.toGrid()}}))}init(){this.renderer=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.container.appendChild(this.renderer.domElement),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.z=50,this.camera.lookAt=this.scene.position;const e=this.getViewSize();this.uniforms.uViewSize.value.x=e.width,this.uniforms.uViewSize.value.y=e.height;var t=new THREE.PlaneBufferGeometry(1,1,128,128),i=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:vertexShader,fragmentShader:fragmentShader,side:THREE.DoubleSide});this.mesh=new THREE.Mesh(t,i),this.scene.add(this.mesh),window.addEventListener("resize",this.onResize.bind(this));for(let e=0;e<this.items.length;e++){this.items[e].addEventListener("mouseenter",t=>this.onGridImageClick(t,e))}}updateMesh(){if(-1===this.itemIndex)return;const e=this.items[this.itemIndex].getBoundingClientRect();this.uniforms.uImageRes.value.x=e.width,this.uniforms.uImageRes.value.y=e.height;const t=this.getViewSize();this.uniforms.uViewSize.value.x=t.width,this.uniforms.uViewSize.value.y=t.height;let i=e.width*t.width/window.innerWidth,n=e.height*t.height/window.innerHeight,s=e.left*t.width/window.innerWidth,r=e.top*t.height/window.innerHeight,a=(s-=t.width/2)+i/2,o=-(r-=t.height/2)-n/2;const h=this.mesh;let l=e.height/e.width;h.scale.x=i,h.scale.y=n,h.position.x=a,h.position.y=o,this.uniforms.uMeshPosition.value.x=a/i,this.uniforms.uMeshPosition.value.y=o/n,i*=1.1,n*=1.1;let c=window.innerHeight/window.innerWidth;console.log("img:",l,"window:",c),l>1||l>c?(this.uniforms.uMeshScale.value.x=n,this.uniforms.uMeshScale.value.y=n,this.uniforms.uViewSize.value.y=t.height):(this.uniforms.uMeshScale.value.x=i,this.uniforms.uMeshScale.value.y=i,this.uniforms.uViewSize.value.y=t.width),this.uniforms.uTexture.value=this.textures[this.itemIndex]}onGridImageClick(e,t){this.itemIndex=t,this.updateMesh(),this.toFullscreen()}render(){this.renderer.render(this.scene,this.camera)}createTextures(){this.textures=[],this.items.forEach(e=>{let t=e.querySelector("img").src;this.textures.push((new THREE.TextureLoader).load(t))})}getViewSize(){const e=this.camera.fov*Math.PI/180,t=Math.abs(this.camera.position.z*Math.tan(e/2)*2);return{width:t*this.camera.aspect,height:t}}onResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),this.updateMesh(),this.render()}}const vertexShader="\n\tuniform float uProgress;\n\tuniform vec2 uMeshScale;\n\tuniform vec2 uMeshPosition;\n\tuniform vec2 uViewSize;\n\n\tvarying vec2 vUv;\n\tvarying vec2 scale;\n\n   float getActivation(vec2 uv){\n      float maxDistance = distance(vec2(0.),vec2(0.5));\n      float dist = distance(vec2(0.), uv-0.5);\n   \treturn smoothstep(0.,maxDistance,dist);\n   }\n\n\tfloat linearStep(float edge0, float edge1, float val) {\n\t\tfloat x = clamp( (val  - edge0) / (edge1 - edge0),0.,1.);\n\t\t\treturn x;\n\t}\n\n\tvoid main(){\n\t   vec3 pos = position.xyz;\n\t\tvec2 newUV = uv;\n\n\t\tfloat activation = getActivation(uv);\n\n      vec3 transformedPos = pos;\n      vec2 transformedUV = uv;\n\n\t   float latestStart = 0.5;\n      float startAt = activation * latestStart;\n      float vertexProgress = smoothstep(startAt,1.,uProgress);\n\n      float limit = 0.5;\n      float wavyProgress = min(clamp((vertexProgress) / limit,0.,1.),clamp((1.-vertexProgress) / (1.-limit),0.,1.));\n\n      float dist = length(transformedPos.xy);\n      \n      float angle = atan(transformedPos.x,transformedPos.y);\n\n      float nextDist = dist * (1. * (sin(angle * 0.1 + 8000.) /2.+0.5)+ 1.);\n\n      transformedPos.x = mix(transformedPos.x,sin(angle) * nextDist ,  wavyProgress);\n      transformedPos.y = mix(transformedPos.y,cos(angle) * nextDist,  wavyProgress);\n\n        pos = transformedPos;\n        newUV = transformedUV; \n\t\t\n\t\t// Scale to page view size/page size\n\t   vec2 scaleToViewSize = uViewSize.y / uMeshScale - 1.;\n\t\t// vec2 scaleToViewSize = uMeshScale;\n      scale = vec2(\n      \t1. + scaleToViewSize * vertexProgress\n      );\n      pos.xy *= scale;\n        \n      // Move towards center \n      pos.y += -uMeshPosition.y * vertexProgress;\n      pos.x += -uMeshPosition.x * vertexProgress;\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n\t\tvUv = newUV;\n\t}\n",fragmentShader="\n\tuniform sampler2D uTexture;\n\tuniform vec2 uMeshScale;\n\tuniform vec2 uImageRes;\n\n\tvarying vec2 vUv;\n\tvarying vec2 scale;\n\n   vec2 preserveAspectRatioSlice(vec2 uv, vec2 planeSize, vec2 imageSize ){\n      \n   vec2 ratio = vec2(\n            min((planeSize.x / planeSize.y) / (imageSize.x / imageSize.y), 1.0),\n            min((planeSize.y / planeSize.x) / (imageSize.y / imageSize.x), 1.0)\n        );\n        \n        \n   vec2 sliceUvs = vec2(\n            uv.x * ratio.x + (1.0 - ratio.x) * 0.5,\n            uv.y * ratio.y + (1.0 - ratio.y) * 0.5\n        );\n\n   \treturn sliceUvs;\n   }\n\n\tvoid main(){\n\t\tvec2 uv = vUv;\n\t\tvec2 scaledPlane = uMeshScale * scale;\n\n\t\tvec2 smallImageUV = preserveAspectRatioSlice(uv, scaledPlane, uImageRes);\n\n\t\tvec3 color = texture2D(uTexture,uv).xyz;\n\n\t\tgl_FragColor = vec4(color,1.);\n\t}\n",effect=new GridToFullscreenEffect(document.getElementById("app"),Array.from(document.getElementsByClassName("p-item")));effect.init();